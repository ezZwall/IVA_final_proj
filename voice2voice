import speech_recognition as sr
import pyttsx3
from transformers import pipeline
import time

# === Initialization ===

engine = pyttsx3.init()
voices = engine.getProperty('voices')
engine.setProperty('voice', voices[0].id)

recognizer = sr.Recognizer()
summarizer = pipeline("summarization", model="facebook/bart-large-cnn")

conversation_history = []
minimum_turns = 3
call_ended = False

# Track conversation state
conversation_state = {
    "current_intent": None,
    "follow_up_index": 0,
    "awaiting_response": False
}

# === Small Talk Responses & Intent Keywords ===

small_talk_map = {
    "hi": "Hi there!",
    "hello": "Hello! How can I help you today?",
    "hey": "Hey! What can I do for you?",
    "how are you": "I'm doing great, thanks for asking! How about you?",
    "i'm good": "That's great to hear!",
    "i'm fine": "Glad you're doing well!",
    "not bad": "That's good to hear. What can I help you with today?",
    "what's your name": "I'm your virtual assistant.",
    "who are you": "I'm your assistant, here to help you with anything you need.",
    "thank you": "You're very welcome!",
    "thanks": "Glad to help!",
    "goodbye": "Goodbye! Have a great day!",
    "bye": "Talk to you later!",
    "what do you do": "I'm here to help with things like billing, tech support, appointments, and warranty questions.",
    "are you real": "I'm real enough to help you get things done!",
    "can you help me": "Of course! What do you need help with?",
    "that's awesome": "Thanks! I'm here to assist.",
}


intent_keywords = {
    "billing": [
        "bill", "payment", "charge", "refund", "invoice", "tax", 
        "pay my bill", "got charged", "billing issue", "overcharged", "how much do I owe"
    ],
    "tech_support": [
        "error", "issue", "problem", "help", "support", "overheating", "computer", "slow",
        "broken", "not working", "crashing", "lag", "blue screen", "freeze", "tech issue"
    ],
    "scheduling": [
        "appointment", "schedule", "reschedule", "meeting", "time", "book", 
        "calendar", "set something up", "plan a call", "make an appointment"
    ],
    "warranty": [
        "warranty", "car", "extended", "vehicle", "coverage", "plan", 
        "insurance", "repair", "warranty details", "fix my car"
    ],
}


intent_responses = {
    "billing": {
        "initial": "I can help you with your bill. Would you like to review your charges or make a payment?",
        "follow_up": [
            "Which bill are you referring to - your recent invoice or a past statement?",
            "Would you like to know about payment options or due dates?",
            "Are you having trouble with a specific charge on your bill?"
        ]
    },
    "tech_support": {
        "initial": "It seems you're having a technical issue. First, is this about a laptop or desktop computer?",
        "follow_up": [
            "Is this a hardware or software issue?",
            "When did you first notice this problem?",
            "Have you tried restarting your device?"
        ]
    },
    "scheduling": {
        "initial": "You want to schedule an appointment. Do you prefer mornings or afternoons? And which day works best for you?",
        "follow_up": []
    },
    "warranty": {
        "initial": "You're asking about your car's extended warranty. First, is this about a specific repair or general coverage?",
        "follow_up": [
            "Is your vehicle currently at a repair shop?",
            "Would you like to check your remaining coverage or file a claim?",
            "What's the make and model of your vehicle?"
        ]
    },
    "general_inquiry": "I'm not sure how to help with that. Could you tell me a bit more?",
}


# === Central Conversation Handler ===

def process_user_input(user_input):
    global call_ended, conversation_history, conversation_state

    if call_ended:
        return

    text = user_input.lower()
    if any(trigger in text for trigger in ["bitch", "fuck", "cunt"]):
        engine.say("Call back when you are nicer")
        call_ended = True
        return

    # 1. Handle small talk
    for phrase, response in small_talk_map.items():
        if phrase in text:
            print(f"Assistant: {response}")
            engine.say(response)
            engine.runAndWait()
            return

    # 2. Handle summary/exit/transfer command
    if any(trigger in text for trigger in ["summary", "transfer", "exit"]):
        summarize_and_end()
        return

    # Add to conversation history
    conversation_history.append(user_input)

    # 3. Handle follow-up questions if we're in that state
    if conversation_state["awaiting_response"]:
        handle_follow_up_response(user_input)
        return

    # 4. Detect intent
    detected_intent = "general_inquiry"
    for intent, keywords in intent_keywords.items():
        if any(word in text for word in keywords):
            detected_intent = intent
            break

    # 5. Respond to intent
    if detected_intent in ["billing", "tech_support", "warranty", "scheduling"]:
        # Start a focused conversation on this topic
        conversation_state = {
            "current_intent": detected_intent,
            "follow_up_index": 0,
            "awaiting_response": True
        }
        response = intent_responses[detected_intent]["initial"]
    else:
        response = intent_responses["general_inquiry"]

    print(f"Assistant: {response}")
    engine.say(response)
    engine.runAndWait()


# === Handle Follow-up Questions ===

def handle_follow_up_response(user_input):
    global conversation_state, conversation_history, call_ended
    
    intent = conversation_state["current_intent"]
    follow_ups = intent_responses[intent]["follow_up"]
    current_index = conversation_state["follow_up_index"]
    
    # Add user response to history
    conversation_history.append(user_input)
    
    # Check if we have more follow-ups
    if current_index < len(follow_ups):
        # Ask next follow-up question
        next_question = follow_ups[current_index]
        print(f"Assistant: {next_question}")
        engine.say(next_question)
        engine.runAndWait()
        
        # Update state
        conversation_state["follow_up_index"] += 1
        conversation_state["awaiting_response"] = True
    else:
        # No more follow-ups, proceed to summary
        summarize_and_end()
        conversation_state = {
            "current_intent": None,
            "follow_up_index": 0,
            "awaiting_response": False
        }


# === Summary & End Call ===

def summarize_and_end():
    global call_ended, conversation_history

    full_text = " ".join(conversation_history)
    detected_intent = "general_inquiry"
    for intent, keywords in intent_keywords.items():
        if any(word in full_text.lower() for word in keywords):
            detected_intent = intent
            break

    try:
        if len(full_text.split()) < 25:
            summary = f"I understand you're asking about {detected_intent.replace('_', ' ')}. Here's what you said: {full_text}"
        else:
            relevant_text = full_text
            if 'overheating' in full_text.lower():
                relevant_text = " ".join([line for line in conversation_history if 'overheating' in line.lower()])
            max_len = min(100, int(len(relevant_text.split()) * 0.7))
            summary = summarizer(relevant_text, max_length=max_len, min_length=10, do_sample=False)[0]['summary_text']
            summary = f"You seem to need help with {detected_intent.replace('_', ' ')}. Here's a quick summary: {summary}"

        print(f"Assistant: {summary}")
        engine.say(summary)
        engine.say("Transferring you now.")
        engine.say("Goodbye! Your request is being forwarded. Thank you for calling.")
        engine.runAndWait()

        call_ended = True
        conversation_history.clear()
        time.sleep(2)

    except Exception as e:
        print(f"Error during summarization: {e}")
        engine.say("Sorry, I had trouble summarizing your request.")
        engine.runAndWait()

# === Microphone Listening Loop ===

def listen_for_input():
    with sr.Microphone() as source:
        print("Listening...")
        recognizer.adjust_for_ambient_noise(source)
        recognizer.pause_threshold = 1.5

        try:
            audio = recognizer.listen(source, timeout=10, phrase_time_limit=20)
            user_input = recognizer.recognize_google(audio)
            print(f"You said: {user_input}")
            process_user_input(user_input)

        except sr.UnknownValueError:
            print("Sorry, I didn't catch that.")
        except sr.WaitTimeoutError:
            print("Listening timed out â€” no speech detected.")
        except sr.RequestError:
            print("Speech service error.")
        except Exception as e:
            print(f"An error occurred: {e}")

# === Main Loop ===

if __name__ == "__main__":
    print("ðŸ¤– Assistant Ready. Say 'summary', 'transfer', or 'exit' to end the conversation.")
    while True:
        if not call_ended:
            listen_for_input()
            time.sleep(1)
        else:
            break
